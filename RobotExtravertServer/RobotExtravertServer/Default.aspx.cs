//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18444
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KennyServer
{
	using System;
	using System.Web;
	using System.Web.UI;
    using System.Drawing;
    using KennyInterProcessBridge;
	
	public partial class Default : System.Web.UI.Page
	{
        static bool isManualModeEnabled = false;
        static bool isMoving = false;
        static bool isMovingForward = false;
        static bool isMovingBackward = false;
        static bool isRotatingLeft = false;
        static bool isRotatingRight = false;

        //

        KennyInterProcessBridge.IKennyAppBridge Kenny
        {
            get { return KennyApp.Instance.PipeProxy; }
            //get { return KennyApp.Instance.HttpProxy; }
        }

        public void buttonEnableManualModeClicked(object sender, EventArgs args)
        {
            if (isManualModeEnabled)
                DisableManualMode();
            else
                EnableManualMode();
        }

        void EnableManualMode()
        {
            isManualModeEnabled = true;

            Kenny.EnableManualMode();
            UpdateMovementButtonsEnabled();
            buttonEnableManualMode.Text = "Disable Manual Mode";
        }

        void DisableManualMode()
        {
            isManualModeEnabled = false;

            Kenny.DisableManualMode();
            UpdateMovementButtonsEnabled();
            buttonEnableManualMode.Text = "Enable Manual Mode";
        }

        void UpdateMovementButtonsEnabled()
        {
            buttonForward.Enabled = isManualModeEnabled;
            buttonBackward.Enabled = isManualModeEnabled;
            buttonLeft.Enabled = isManualModeEnabled;
            buttonRight.Enabled = isManualModeEnabled;
        }

        public void buttonStartStopConnectionClicked(object sender, EventArgs args)
        {
            if (KennyApp.Instance == null)
            {
                KennyApp.Init();

                buttonEnableManualMode.Enabled = true;
                buttonStartStopConnection.Text = "Stop Connection";
            }
            else
            {
                if (isManualModeEnabled)
                    DisableManualMode();

                KennyApp.Shutdown();

                buttonEnableManualMode.Enabled = false;
                buttonStartStopConnection.Text = "Start Connection";
            }
        }

        protected void Timer1_Tick(object sender, EventArgs e)
        {
            UpdateTelemetry();
            //DateTimeLabel2.Text = Kenny.Get42().ToString();//!!!!vladimir: test
            //RenderWebCameraFrame();
        }

        string VectorToString(float x, float y, float z)
        {
            return String.Format("{0:000.000} {1:000.000} {2:000.000}", x, y, z);
        }

        void UpdateTelemetry()
        {
            if (KennyApp.Instance == null)
                return;

            try
            {
                Telemetry telemetry = Kenny.GetTelemetry();

                textBoxUltrasoniSensor0.Text = telemetry.ultrasonicSensor0Value.ToString("0000");

                textBoxMagnetometerVector.Text = VectorToString(telemetry.magnetometerX, telemetry.magnetometerY,
                    telemetry.magnetometerZ);
                textBoxAccelerometerVector.Text = VectorToString(telemetry.accelerometerX, telemetry.accelerometerY,
                    telemetry.accelerometerZ);
                textBoxGyroscopeVector.Text = VectorToString(telemetry.gyroscopeX, telemetry.gyroscopeY,
                    telemetry.gyroscopeZ);

                textBoxBatteryVoltage.Text = telemetry.batteryVoltage.ToString("0.0");
                textBoxChargerVoltage.Text = telemetry.chargerVoltage.ToString("0.0");
            }
            catch { }
        }

        //void RenderWebCameraFrame()
        //{
        //    //Bitmap frameBitmap = Kenny.GetWebCameraFrame();

        //    //Bitmap frameBitmap = new Bitmap(320, 240);
        //    //for (int x = 0; x < 320; x++)
        //    //    for (int y = 0; y < 240; y++)
        //    //        frameBitmap.SetPixel(x, y, Color.Firebrick);

        //    //Random r = new Random();

        //    //string fileName = @"D:\WebCamImage" + (r.Next() % 100).ToString() + ".bmp";
        //    //frameBitmap.Save(fileName);//!!!!vladimir: ohhhhh.....
        //    //WebCamImage.ImageUrl = fileName;

        //    //string script =
        //    //    "<script type=\"javascript\">var canvas = document.getElementById('canvas');" +
        //    //    "var context = canvas.getContext(\"2d\");var img = new Image();" +
        //    //    "img.src = \"WebCamImagePage.aspx\";img.onload = function() {" +
        //    //    "context.drawImage(img, 0, 0, canvas.width, canvas.height);" +
        //    //    "}</script>";
        //    //Response.Write(script);

        //    //// Define the name and type of the client scripts on the page.
        //    //String csname1 = "PopupScript";
        //    //Type cstype = this.GetType();

        //    //// Get a ClientScriptManager reference from the Page class.
        //    //ClientScriptManager cs = Page.ClientScript;

        //    //// Check to see if the startup script is already registered.
        //    //if (!cs.IsStartupScriptRegistered(cstype, csname1))
        //    //{
        //    //    String cstext1 = "alert('Hello World');";
        //    //    cs.RegisterStartupScript(cstype, csname1, cstext1, true);
        //    //}

        //    //ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "ScriptManager", "javascript:refreshWebCamImage();", true);

        //    DateTimeLabel2.Text = "21";

            
        //}

        //public void setPage( HTMLWindow2Class JSFile)
        //{
        //}

        public void buttonLeftClicked(object sender, EventArgs args)
        {
            if (isMoving && !isRotatingLeft)
                return;

            isRotatingLeft = !isRotatingLeft;

            buttonLeft.Font.Bold = isRotatingLeft;

            if (isRotatingLeft)
                Kenny.RotateLeft();
            else
                Kenny.Stop();

            isMoving = isRotatingLeft;
        }

        public void buttonRightClicked(object sender, EventArgs args)
        {
            if (isMoving && !isRotatingRight)
                return;

            isRotatingRight = !isRotatingRight;

            buttonRight.Font.Bold = isRotatingRight;

            if (isRotatingRight)
                Kenny.RotateRight();
            else
                Kenny.Stop();

            isMoving = isRotatingRight;
        }

        public void buttonForwardClicked(object sender, EventArgs args)
        {
            if (isMoving && !isMovingForward)
                return;

            isMovingForward = !isMovingForward;

            buttonForward.Font.Bold = isMovingForward;

            if (isMovingForward)
                Kenny.MoveForward();
            else
                Kenny.Stop();

            isMoving = isMovingForward;
        }

        public void buttonBackwardClicked(object sender, EventArgs args)
        {
            if (isMoving && !isMovingBackward)
                return;

            isMovingBackward = !isMovingBackward;

            buttonBackward.Font.Bold = isMovingBackward;

            if (isMovingBackward)
                Kenny.MoveBackward();
            else
                Kenny.Stop();

            isMoving = isMovingBackward;
        }

        //[System.Web.Services.WebMethod]
        //public static void OnClose()
        //{
        //    throw new Exception("ololo");
        //}

        [System.Web.Services.WebMethod]
        public static bool IsShutdown()
        {
            return KennyApp.Instance == null;
        }
	}
}

